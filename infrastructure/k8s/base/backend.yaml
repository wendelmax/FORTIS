apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortis-backend
  namespace: fortis
  labels:
    app: fortis-backend
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fortis-backend
  template:
    metadata:
      labels:
        app: fortis-backend
        component: api
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: fortis/backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fortis-database-secret
              key: postgres-password
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: fortis-redis-secret
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fortis-jwt-secret
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: fortis-encryption-secret
              key: encryption-key
        - name: TSE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: fortis-tse-secret
              key: tse-client-id
        - name: TSE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: fortis-tse-secret
              key: tse-client-secret
        - name: TSE_API_KEY
          valueFrom:
            secretKeyRef:
              name: fortis-tse-secret
              key: tse-api-key
        - name: POLYGON_RPC_URL
          valueFrom:
            secretKeyRef:
              name: fortis-blockchain-secret
              key: polygon-rpc-url
        - name: CONTRACT_ADDRESS
          valueFrom:
            secretKeyRef:
              name: fortis-blockchain-secret
              key: contract-address
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: fortis-monitoring-secret
              key: sentry-dsn
        volumeMounts:
        - name: backend-config
          mountPath: /app/config
        - name: backend-logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: backend-config
        configMap:
          name: fortis-backend-config
      - name: backend-logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fortis-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: fortis-backend
  namespace: fortis
  labels:
    app: fortis-backend
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: fortis-backend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fortis-backend-hpa
  namespace: fortis
  labels:
    app: fortis-backend
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fortis-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fortis-backend-pdb
  namespace: fortis
  labels:
    app: fortis-backend
    component: pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fortis-backend
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fortis-backend-netpol
  namespace: fortis
  labels:
    app: fortis-backend
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: fortis-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: fortis
    - podSelector:
        matchLabels:
          app: fortis-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: fortis-postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: fortis-redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
