# FORTIS - CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Testes e Linting
  test:
    name: Testes e Linting
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: fortis
          POSTGRES_DB: fortis
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache dependências Rust
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Instalar dependências do sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libpq-dev pkg-config

    - name: Formatar código
      run: cd backend && cargo fmt --all -- --check

    - name: Linting com Clippy
      run: cd backend && cargo clippy --all-targets --all-features -- -D warnings

    - name: Executar testes
      run: cd backend && cargo test --all-features
      env:
        DATABASE_URL: postgresql://fortis:password@localhost:5432/fortis
        REDIS_URL: redis://localhost:6379
        RUST_LOG: info

  # Build e Deploy
  build:
    name: Build e Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build e Push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          fortis/backend:latest
          fortis/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy para Staging
  deploy-staging:
    name: Deploy para Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy para Staging
      run: |
        echo "Deploy para staging será implementado aqui"
        # TODO: Implementar deploy para staging

  # Deploy para Produção
  deploy-production:
    name: Deploy para Produção
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy para Produção
      run: |
        echo "Deploy para produção será implementado aqui"
        # TODO: Implementar deploy para produção

  # Testes de Segurança
  security:
    name: Testes de Segurança
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Instalar cargo-audit
      run: cargo install cargo-audit

    - name: Executar auditoria de segurança
      run: cd backend && cargo audit

    - name: Instalar cargo-deny
      run: cargo install cargo-deny

    - name: Verificar licenças
      run: cd backend && cargo deny check

  # Testes de Performance
  performance:
    name: Testes de Performance
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Instalar dependências do sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libpq-dev pkg-config

    - name: Executar testes de performance
      run: cd backend && cargo test --release --test performance
      env:
        DATABASE_URL: postgresql://fortis:password@localhost:5432/fortis
        REDIS_URL: redis://localhost:6379
        RUST_LOG: info
