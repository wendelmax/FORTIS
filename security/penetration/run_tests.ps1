# FORTIS Security Test Suite Runner - PowerShell
# Executa todos os testes de seguran√ßa do sistema FORTIS

param(
    [Parameter(Position=0)]
    [string]$Command = "all",
    
    [string]$ApiUrl = "http://localhost:8080",
    [string]$Domain = "fortis.gov.br",
    [string]$ContractPath = "blockchain/contracts/FortisVoting.sol",
    [string]$ConfigFile = "security/penetration/config/security_config.json",
    [switch]$Verbose,
    [switch]$Quiet,
    [switch]$Help
)

# Fun√ß√£o para imprimir com cores
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    $colorMap = @{
        "Red" = "Red"
        "Green" = "Green"
        "Yellow" = "Yellow"
        "Blue" = "Blue"
        "Cyan" = "Cyan"
        "Magenta" = "Magenta"
        "White" = "White"
    }
    
    Write-Host $Message -ForegroundColor $colorMap[$Color]
}

# Fun√ß√£o para verificar depend√™ncias
function Test-Dependencies {
    Write-ColorOutput "üîç Verificando depend√™ncias..." "Blue"
    
    # Verifica Python
    if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
        Write-ColorOutput "‚ùå Python n√£o encontrado" "Red"
        exit 1
    }
    
    # Verifica pip
    if (-not (Get-Command pip -ErrorAction SilentlyContinue)) {
        Write-ColorOutput "‚ùå pip n√£o encontrado" "Red"
        exit 1
    }
    
    # Verifica Node.js
    if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
        Write-ColorOutput "‚ùå Node.js n√£o encontrado" "Red"
        exit 1
    }
    
    # Verifica npm
    if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
        Write-ColorOutput "‚ùå npm n√£o encontrado" "Red"
        exit 1
    }
    
    Write-ColorOutput "‚úÖ Todas as depend√™ncias encontradas" "Green"
}

# Fun√ß√£o para instalar depend√™ncias Python
function Install-PythonDependencies {
    Write-ColorOutput "üì¶ Instalando depend√™ncias Python..." "Blue"
    
    pip install -r security/penetration/requirements.txt
    
    Write-ColorOutput "‚úÖ Depend√™ncias Python instaladas" "Green"
}

# Fun√ß√£o para instalar depend√™ncias Node.js
function Install-NodeDependencies {
    Write-ColorOutput "üì¶ Instalando depend√™ncias Node.js..." "Blue"
    
    # Instala depend√™ncias do backend
    if (Test-Path "backend") {
        Set-Location backend
        cargo build --release
        Set-Location ..
    }
    
    # Instala depend√™ncias do blockchain
    if (Test-Path "blockchain") {
        Set-Location blockchain
        npm install
        Set-Location ..
    }
    
    # Instala depend√™ncias do frontend
    if (Test-Path "frontend") {
        Set-Location frontend
        npm install
        Set-Location ..
    }
    
    # Instala depend√™ncias do mobile
    if (Test-Path "mobile") {
        Set-Location mobile
        npm install
        Set-Location ..
    }
    
    Write-ColorOutput "‚úÖ Depend√™ncias Node.js instaladas" "Green"
}

# Fun√ß√£o para configurar ambiente
function Initialize-Environment {
    Write-ColorOutput "‚öôÔ∏è Configurando ambiente..." "Blue"
    
    # Cria diret√≥rios necess√°rios
    New-Item -ItemType Directory -Force -Path "security/penetration/reports" | Out-Null
    New-Item -ItemType Directory -Force -Path "security/penetration/logs" | Out-Null
    New-Item -ItemType Directory -Force -Path "security/penetration/config" | Out-Null
    
    # Configura vari√°veis de ambiente
    $env:FORTIS_API_URL = $ApiUrl
    $env:FORTIS_DOMAIN = $Domain
    $env:FORTIS_CONTRACT_PATH = $ContractPath
    
    Write-ColorOutput "‚úÖ Ambiente configurado" "Green"
}

# Fun√ß√£o para executar testes de seguran√ßa
function Invoke-SecurityTests {
    Write-ColorOutput "üõ°Ô∏è Executando testes de seguran√ßa..." "Blue"
    
    # Executa suite principal de testes
    python security/penetration/scripts/run_security_tests.py --config $ConfigFile
    
    Write-ColorOutput "‚úÖ Testes de seguran√ßa conclu√≠dos" "Green"
}

# Fun√ß√£o para executar testes r√°pidos
function Invoke-QuickTests {
    Write-ColorOutput "‚ö° Executando testes r√°pidos..." "Blue"
    
    # Executa suite de testes r√°pidos
    python security/penetration/scripts/run_security_tests.py --config $ConfigFile --quick
    
    Write-ColorOutput "‚úÖ Testes r√°pidos conclu√≠dos" "Green"
}

# Fun√ß√£o para executar testes espec√≠ficos
function Invoke-SpecificTests {
    param([string]$TestType)
    
    switch ($TestType) {
        "owasp" {
            Write-ColorOutput "üîç Executando testes OWASP ZAP..." "Blue"
            python security/penetration/scripts/owasp_zap_scan.py $env:FORTIS_API_URL
        }
        "smart-contracts" {
            Write-ColorOutput "‚ò∏Ô∏è Executando testes de smart contracts..." "Blue"
            python security/penetration/scripts/smart_contract_security.py $env:FORTIS_CONTRACT_PATH
        }
        "crypto" {
            Write-ColorOutput "üîê Executando testes de criptografia..." "Blue"
            python security/penetration/scripts/crypto_security_test.py $env:FORTIS_API_URL
        }
        "infrastructure" {
            Write-ColorOutput "üèóÔ∏è Executando testes de infraestrutura..." "Blue"
            python security/penetration/scripts/infrastructure_security.py $env:FORTIS_DOMAIN
        }
        "mobile" {
            Write-ColorOutput "üì± Executando testes de seguran√ßa mobile..." "Blue"
            python security/penetration/scripts/mobile_security.py mobile
        }
        default {
            Write-ColorOutput "‚ùå Tipo de teste inv√°lido: $TestType" "Red"
            Write-ColorOutput "Tipos dispon√≠veis: owasp, smart-contracts, crypto, infrastructure, mobile" "Yellow"
            exit 1
        }
    }
    
    Write-ColorOutput "‚úÖ Testes $TestType conclu√≠dos" "Green"
}

# Fun√ß√£o para gerar relat√≥rio consolidado
function New-ConsolidatedReport {
    Write-ColorOutput "üìÑ Gerando relat√≥rio consolidado..." "Blue"
    
    # Agrega todos os relat√≥rios em um √∫nico arquivo
    python security/penetration/scripts/consolidate_reports.py
    
    Write-ColorOutput "‚úÖ Relat√≥rio consolidado gerado" "Green"
}

# Fun√ß√£o para limpar arquivos tempor√°rios
function Clear-TemporaryFiles {
    Write-ColorOutput "üßπ Limpando arquivos tempor√°rios..." "Blue"
    
    # Remove arquivos tempor√°rios
    if (Test-Path "security/penetration/temp/") {
        Remove-Item -Recurse -Force "security/penetration/temp/"
    }
    
    if (Test-Path "security/penetration/logs/") {
        Get-ChildItem "security/penetration/logs/*.tmp" | Remove-Item -Force
    }
    
    Write-ColorOutput "‚úÖ Limpeza conclu√≠da" "Green"
}

# Fun√ß√£o para mostrar ajuda
function Show-Help {
    Write-Host "FORTIS Security Test Suite Runner - PowerShell"
    Write-Host ""
    Write-Host "Uso: .\run_tests.ps1 [COMANDO] [OP√á√ïES]"
    Write-Host ""
    Write-Host "Comandos:"
    Write-Host "  all                 Executa todos os testes de seguran√ßa"
    Write-Host "  quick              Executa apenas testes r√°pidos"
    Write-Host "  owasp              Executa apenas testes OWASP ZAP"
    Write-Host "  smart-contracts    Executa apenas testes de smart contracts"
    Write-Host "  crypto             Executa apenas testes de criptografia"
    Write-Host "  infrastructure     Executa apenas testes de infraestrutura"
    Write-Host "  mobile             Executa apenas testes de seguran√ßa mobile"
    Write-Host "  setup              Configura ambiente e instala depend√™ncias"
    Write-Host "  clean              Limpa arquivos tempor√°rios"
    Write-Host "  help               Mostra esta ajuda"
    Write-Host ""
    Write-Host "Op√ß√µes:"
    Write-Host "  -ApiUrl URL        URL da API (padr√£o: http://localhost:8080)"
    Write-Host "  -Domain DOMAIN     Dom√≠nio alvo (padr√£o: fortis.gov.br)"
    Write-Host "  -ContractPath PATH Caminho do contrato (padr√£o: blockchain/contracts/FortisVoting.sol)"
    Write-Host "  -ConfigFile FILE   Arquivo de configura√ß√£o personalizado"
    Write-Host "  -Verbose           Modo verboso"
    Write-Host "  -Quiet             Modo silencioso"
    Write-Host "  -Help              Mostra esta ajuda"
    Write-Host ""
    Write-Host "Exemplos:"
    Write-Host "  .\run_tests.ps1 setup                    # Configura ambiente"
    Write-Host "  .\run_tests.ps1 all                      # Executa todos os testes"
    Write-Host "  .\run_tests.ps1 quick                    # Executa testes r√°pidos"
    Write-Host "  .\run_tests.ps1 owasp                    # Executa apenas testes OWASP"
    Write-Host "  .\run_tests.ps1 -ApiUrl http://api.fortis.gov.br all  # Executa com API personalizada"
}

# Fun√ß√£o principal
function Main {
    if ($Help) {
        Show-Help
        return
    }
    
    # Configura modo verboso/silencioso
    if ($Verbose) {
        $VerbosePreference = "Continue"
    }
    
    if ($Quiet) {
        $VerbosePreference = "SilentlyContinue"
        $WarningPreference = "SilentlyContinue"
    }
    
    # Executa comando
    switch ($Command) {
        "setup" {
            Test-Dependencies
            Install-PythonDependencies
            Install-NodeDependencies
            Initialize-Environment
        }
        "all" {
            Test-Dependencies
            Initialize-Environment
            Invoke-SecurityTests
            New-ConsolidatedReport
            Clear-TemporaryFiles
        }
        "quick" {
            Test-Dependencies
            Initialize-Environment
            Invoke-QuickTests
            Clear-TemporaryFiles
        }
        "owasp" {
            Test-Dependencies
            Initialize-Environment
            Invoke-SpecificTests "owasp"
            Clear-TemporaryFiles
        }
        "smart-contracts" {
            Test-Dependencies
            Initialize-Environment
            Invoke-SpecificTests "smart-contracts"
            Clear-TemporaryFiles
        }
        "crypto" {
            Test-Dependencies
            Initialize-Environment
            Invoke-SpecificTests "crypto"
            Clear-TemporaryFiles
        }
        "infrastructure" {
            Test-Dependencies
            Initialize-Environment
            Invoke-SpecificTests "infrastructure"
            Clear-TemporaryFiles
        }
        "mobile" {
            Test-Dependencies
            Initialize-Environment
            Invoke-SpecificTests "mobile"
            Clear-TemporaryFiles
        }
        "clean" {
            Clear-TemporaryFiles
        }
        "help" {
            Show-Help
        }
        default {
            Write-ColorOutput "‚ùå Comando inv√°lido: $Command" "Red"
            Show-Help
            exit 1
        }
    }
}

# Executa fun√ß√£o principal
Main
